generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

model Users {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username String @db.VarChar(255) @unique
  email String @db.VarChar(255) @unique
  password String @db.VarChar(255)
  picture String @db.VarChar() @default("")
}

model Employees {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  email String @unique @db.VarChar(255)
  gender Gender @default(MALE)
  placeOfBirth String
  dateOfBirth DateTime
  marriageStatus Boolean @default(false)
  photo String?
  address String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  schools EmployeeSchools[]
  roles EmployeeRoles[]
  teams EmployeeTeams[]
}

model EmployeeTeams {
  employeeId Int
  teamId Int
  code String
  roleId Int @default(2)
  role Roles @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employees Employees @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teams Teams @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  id Int @id @default(autoincrement())
}

model EmployeeSchools {
  id Int @id @default(autoincrement())
  graduateYear Int @default(2020)
  employeeId Int
  schoolId Int
  employeess Employees @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  schools Schools @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Schools {
  id Int @id @default(autoincrement())
  name String @unique
  level SchoolLevel @default(sma)
  address String @db.VarChar(255) @default("")
  employees EmployeeSchools[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teams {
  id Int @id @default(autoincrement())
  name String
  code String @unique
  employees EmployeeTeams[]
  address String?
  image String?
}

model EmployeeRoles {
  id Int @id @default(autoincrement())
  employeeId Int
  roleId Int
  employees Employees @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roles Roles @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Roles {
  id Int @id @default(autoincrement())
  name String @unique
  detail String @default("")
  employees EmployeeRoles[]
  team EmployeeTeams[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SchoolLevel {
  tk
  sd
  smp
  sma
  ptn
  pts
}
